import torch
from model import ResNet9  # Ensure ResNet9 is defined in model.py
import os

# Path to the model file
disease_model_path = "models/plant_disease_model.pth"

# Placeholder: Ensure disease_classes is defined
disease_classes = [...]  # Replace with your disease classes list

# Initialize the model with correct parameters
disease_model = ResNet9(num_channels=3, num_classes=len(disease_classes))

# Check if the model path exists before proceeding
if not os.path.exists(disease_model_path):
    print(f"Model file not found at {disease_model_path}. Please check the path.")
else:
    try:
        # Attempt to load as a state dictionary
        checkpoint = torch.load(disease_model_path, map_location=torch.device("cpu"))
        
        # Check if the file is a state dict (dictionary) or a complete model object
        if isinstance(checkpoint, dict):
            disease_model.load_state_dict(checkpoint)
            print("Loaded state dictionary successfully.")
        else:
            # If it's a full model, assign directly
            disease_model = checkpoint
            print("Loaded full model object successfully.")

        disease_model.eval()
        print("Model loaded successfully.")

    except RuntimeError as e:
        print("RuntimeError encountered. Attempting with 'latin1' encoding.")
        try:
            checkpoint = torch.load(disease_model_path, map_location=torch.device("cpu"), encoding="latin1")
            if isinstance(checkpoint, dict):
                disease_model.load_state_dict(checkpoint)
                print("Loaded state dictionary with 'latin1' encoding successfully.")
            else:
                disease_model = checkpoint
                print("Loaded full model object with 'latin1' encoding successfully.")

            disease_model.eval()
            
            # Save the model in the standard format to prevent future issues
            torch.save(disease_model.state_dict(), disease_model_path)
            print(f"Model re-saved to {disease_model_path} in standard format.")

        except Exception as e:
            print(f"Error loading model with 'latin1' encoding: {e}")

    except _pickle.UnpicklingError:
        print("Error: Model file may be corrupted or incompatible. Consider re-downloading the model file.")

